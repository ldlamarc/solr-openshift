apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: solr
objects:
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: null
    generation: 3
    name: solr-01v2-ss-${ENV}
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: solr-01v2-app-${ENV}
    serviceName: solr-01v2-${ENV}
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: solr-01v2-app-${ENV}
      spec:
        containers:
        - env:
          - name: SOLR_HOME
            valueFrom:
              configMapKeyRef:
                key: solrHome
                name: solr-01v2-config-${ENV}
          - name: SOLR_PORT
            valueFrom:
              configMapKeyRef:
                key: solrPort
                name: solr-01v2-config-${ENV}
          - name: ZK_HOST
            valueFrom:
              configMapKeyRef:
                key: zkHost
                name: solr-01v2-config-${ENV}
          - name: SOLR_HOST
            valueFrom:
              configMapKeyRef:
                key: solrHost
                name: solr-01v2-config-${ENV}
          - name: SOLR_LOGS_DIR
            valueFrom:
              configMapKeyRef:
                key: solrLogsDir
                name: solr-01v2-config-${ENV}
          image: solr:${SOLR_VERSION_MAJ}
          readinessProbe:
            exec:
              command: ["/bin/bash", "-c", "echo > /dev/tcp/zookeeper-service-${ENV}/2181"]
            initialDelaySeconds: 50
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: /solr
              port: 2083
            initialDelaySeconds: 60
            timeoutSeconds: 13
          imagePullPolicy: Always
          name: solr-${ENV}
          ports:
          - containerPort: 2083
            name: solr-port
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /store
            name: volsolr
        dnsPolicy: ClusterFirst

        initContainers:
        - command: ["/bin/sh", "-c"]
          args:
            - mkdir -p /store/data;  mkdir -p /store/data ;  chmod 755  -R /store ; chown 8983:8983 -R  /store/
          image: 'busybox'
          imagePullPolicy: Always
          name: init-solr-data
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          securityContext:
            privileged: true
            readOnlyRootFilesystem: false
            runAsUser: 0
          volumeMounts:
            - mountPath: /store
              name: volsolr
        - command: ["/bin/sh", "-c"]
          args:
            - cp /opt/solr/server/solr/solr.xml /store/data/solr.xml
          image: 'solr:6'
          imagePullPolicy: Always
          name: init-solr-xml
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          securityContext:
            privileged: true
            readOnlyRootFilesystem: false
            runAsUser: 0
          volumeMounts:
            - mountPath: /store
              name: volsolr

        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          anyuid: true
          readOnlyRootFilesystem: false
          runAsUser: 8983
        terminationGracePeriodSeconds: 10
        volumes:
        - name: volsolr
          persistentVolumeClaim:
            claimName: task-solr-pv-claim
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: volsolr
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${disksize}
      status:
        phase: Pending
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: solr-ss-bc744d6c4
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updateRevision: solr-ss-bc744d6c4
    updatedReplicas: 1

- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: null
    generation: 3
    name: solr-02v2-ss-${ENV}
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: solr-02v2-app-${ENV}
    serviceName: solr-02v2-${ENV}
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: solr-02v2-app-${ENV}
      spec:
        containers:
        - env:
          - name: SOLR_HOME
            valueFrom:
              configMapKeyRef:
                key: solrHome
                name: solr-02v2-config-${ENV}
          - name: SOLR_PORT
            valueFrom:
              configMapKeyRef:
                key: solrPort
                name: solr-02v2-config-${ENV}
          - name: ZK_HOST
            valueFrom:
              configMapKeyRef:
                key: zkHost
                name: solr-02v2-config-${ENV}
          - name: SOLR_HOST
            valueFrom:
              configMapKeyRef:
                key: solrHost
                name: solr-02v2-config-${ENV}
          - name: SOLR_LOGS_DIR
            valueFrom:
              configMapKeyRef:
                key: solrLogsDir
                name: solr-02v2-config-${ENV}
          image: solr:${SOLR_VERSION_MAJ}
          readinessProbe:
            exec:
              command: ["/bin/bash", "-c", "echo > /dev/tcp/zookeeper-service-${ENV}/2181"]
            initialDelaySeconds: 50
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: /solr
              port: 2082
            initialDelaySeconds: 60
            timeoutSeconds: 13
          imagePullPolicy: Always
          name: solr-${ENV}
          ports:
          - containerPort: 2082
            name: http
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /store
            name: volsolr
        dnsPolicy: ClusterFirst

        initContainers:
        - command: ["/bin/sh", "-c"]
          args:
            - mkdir -p /store/data;  mkdir -p /store/data ;  chmod 755  -R /store ; chown 8983:8983 -R  /store/
          image: 'busybox'
          imagePullPolicy: Always
          name: init-solr-data
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          securityContext:
            privileged: true
            readOnlyRootFilesystem: false
            runAsUser: 0
          volumeMounts:
            - mountPath: /store
              name: volsolr
        - command: ["/bin/sh", "-c"]
          args:
            - cp /opt/solr/server/solr/solr.xml /store/data/solr.xml
          image: 'solr:6'
          imagePullPolicy: Always
          name: init-solr-xml
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          securityContext:
            privileged: true
            readOnlyRootFilesystem: false
            runAsUser: 0
          volumeMounts:
            - mountPath: /store
              name: volsolr

        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          anyuid: true
          readOnlyRootFilesystem: false
          runAsUser: 8983
        terminationGracePeriodSeconds: 10
        volumes:
        - name: volsolr
          persistentVolumeClaim:
            claimName: task-solr-pv-claim
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: volsolr
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${disksize}
      status:
        phase: Pending
  status:

- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: null
    generation: 1
    name: zookeeper-ss-${ENV}
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: zookeeper-app-${ENV}
    serviceName: zookeeper-service-${ENV}
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: zookeeper-app-${ENV}
      spec:
        containers:
        - env:
          - name: ZOO_MY_ID
            valueFrom:
              configMapKeyRef:
                key: zooMyId
                name: zookeeper-config-${ENV}
          - name: ZOO_LOG_DIR
            valueFrom:
              configMapKeyRef:
                key: zooLogDir
                name: zookeeper-config-${ENV}
          - name: ZOO_DATA_DIR
            valueFrom:
              configMapKeyRef:
                key: zooDataDir
                name: zookeeper-config-${ENV}
          - name: ZOO_DATA_LOG_DIR
            valueFrom:
              configMapKeyRef:
                key: zooDataLogDir
                name: zookeeper-config-${ENV}
          - name: ZOO_PORT
            valueFrom:
              configMapKeyRef:
                key: zooPort
                name: zookeeper-config-${ENV}
          image: zookeeper:latest
          imagePullPolicy: Always
          name: zookeeper-${ENV}
          ports:
          - containerPort: 2181
            name: zookeeper-port
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /store
            name: volzookeeper-${ENV}
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - mkdir -p /store/data && chown 1000:1000 /store/data
          image: busybox
          imagePullPolicy: Always
          name: init-zookeeper-data
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /store
            name: volzookeeper-${ENV}
        - command:
          - sh
          - -c
          - mkdir -p /store/logs && chown 1000:1000 /store/logs
          image: busybox
          imagePullPolicy: Always
          name: init-zookeeper-logs
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /store
            name: volzookeeper-${ENV}
        - command:
          - sh
          - -c
          - mkdir -p /store/datalog && chown 1000:1000 /store/datalog
          image: busybox
          imagePullPolicy: Always
          name: init-zookeeper-datalog
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /store
            name: volzookeeper-${ENV}
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          privileged: true
          readOnlyRootFilesystem: false
        terminationGracePeriodSeconds: 10
        volumes:
        - name: volzookeeper-${ENV}
          persistentVolumeClaim:
            claimName: task-zookeeper-pv-claim
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: volzookeeper-${ENV}
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
      status:
        phase: Pending
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: zookeeper-ss-7bdbcb8cb
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: zookeeper-ss-7bdbcb8cb
    updatedReplicas: 1
- apiVersion: v1
  data:
    solrHome: /store/data
    solrHost: solr-01v2-${ENV}
    solrLogsDir: /store/logs
    solrPort: "2083"
    zkHost: zookeeper-service-${ENV}:2181
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    name: solr-01v2-config-${ENV}
- apiVersion: v1
  data:
    solrHome: /store/data
    solrHost: solr-02v2-${ENV}
    solrLogsDir: /store/logs
    solrPort: "2082"
    zkHost: zookeeper-service-${ENV}:2181
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    name: solr-02v2-config-${ENV}

- apiVersion: v1
  data:
    zooDataDir: /store/data
    zooDataLogDir: /store/datalog
    zooLogDir: /store/logs
    zooMyId: "1"
    zooPort: "2181"
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    name: zookeeper-config-${ENV}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: solr-01v2-${ENV}
  spec:
    ports:
    - port: 2083
      protocol: TCP
      targetPort: 2083
      name: http
    selector:
      app: solr-01v2-app-${ENV}
    sessionAffinity: None
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: solr-02v2-${ENV}
  spec:
    ports:
    - port: 2082
      protocol: TCP
      targetPort: 2082
      name: http
    selector:
      app: solr-02v2-app-${ENV}
    sessionAffinity: None
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: zookeeper-service-${ENV}
  spec:
    ports:
    - port: 2181
      protocol: TCP
      targetPort: 2181
    selector:
      app: zookeeper-app-${ENV}
    sessionAffinity: None
  status:
    loadBalancer: {}
parameters:
  - name: ENV
    value: "qas"
  - name: SOLR_VERSION_MAJ
    value: "6"
  - name: disksize
    value: "20Gi"
